package com.quanlythuvien.util;

import com.github.javafaker.Faker;
import com.quanlythuvien.db.DBConnect;

import java.sql.*;
import java.math.BigDecimal;
import java.sql.Date;
import java.text.Normalizer;
import java.time.LocalDate;
import java.util.*;

public class FakeDataGenerator {
    private static final Faker faker = new Faker(new Locale("vi"));
    private static final Random random = new Random();

    // ƒê·ªãnh nghƒ©a s·ªë l∆∞·ª£ng c·ªë ƒë·ªãnh
    private static final int COUNT_SINH_VIEN = 50;
    private static final int COUNT_NHAN_VIEN = 20;
    private static final int COUNT_TAC_GIA = 20;
    private static final int COUNT_NXB = 10;
    private static final int COUNT_PHIEU_MUON = 60;
    private static final int COUNT_PHIEU_TRA = 50;
    private static final int COUNT_SACH = 80;

    // C√°c bi·∫øn l∆∞u tr·ªØ ti·ªÅn t·ªë ng·∫´u nhi√™n (XXX) cho t·ª´ng b·∫£ng
    private static int PREFIX_SV;
    private static int PREFIX_NV;
    private static int PREFIX_TG;
    private static int PREFIX_TL;
    private static int PREFIX_NXB;
    private static int PREFIX_SACH;
    private static int PREFIX_PM;
    private static int PREFIX_PT;

    // Set ƒë·ªÉ ƒë·∫£m b·∫£o t√≠nh DUY NH·∫§T c·ªßa c√°c ti·ªÅn t·ªë 3 ch·ªØ s·ªë
    private static final Set<Integer> usedPrefixes = new HashSet<>();


    // Danh s√°ch l∆∞u tr·ªØ c√°c ID ƒë√£ t·∫°o ƒë·ªÉ d√πng cho Foreign Key (s·∫Ω l√† d√£y 6 ch·ªØ s·ªë)
    private static final List<Integer> maSinhViens = new ArrayList<>();
    private static final List<Integer> maNhanViens = new ArrayList<>();
    private static final List<Integer> maSachs = new ArrayList<>();
    private static final List<Integer> maPhieuMuons = new ArrayList<>();
    private static final List<Integer> maTacGias = new ArrayList<>();
    private static final List<Integer> maTheLoais = new ArrayList<>();
    private static final List<Integer> maNXBs = new ArrayList<>();


    // ================== H√ÄM H·ªñ TR·ª¢ ƒê√É C·∫¨P NH·∫¨T ==================
    /**
     * Chuy·ªÉn ƒë·ªïi chu·ªói ti·∫øng Vi·ªát c√≥ d·∫•u th√†nh kh√¥ng d·∫•u, lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† chuy·ªÉn th√†nh ch·ªØ th∆∞·ªùng.
     * ƒê·∫∂C BI·ªÜT: X·ª≠ l√Ω 'ƒê'/'ƒë' th√†nh 'd'.
     */
    private static String toNonDiacritic(String text) {
        if (text == null || text.isEmpty()) {
            return "";
        }

        // 1. Chuy·ªÉn v·ªÅ ch·ªØ th∆∞·ªùng
        String temp = text.toLowerCase();

        // 2. X·ª≠ l√Ω k√Ω t·ª± 'ƒë' th√†nh 'd' (tr∆∞·ªõc khi lo·∫°i b·ªè d·∫•u)
        temp = temp.replace('ƒë', 'd');

        // 3. Chu·∫©n h√≥a sang Form NFD (Canonical Decomposition)
        String normalized = Normalizer.normalize(temp, Normalizer.Form.NFD);

        // 4. Lo·∫°i b·ªè c√°c d·∫•u k·∫øt h·ª£p (huy·ªÅn, s·∫Øc, h·ªèi, ng√£, n·∫∑ng)
        String nonDiacritic = normalized.replaceAll("\\p{InCombiningDiacriticalMarks}+", "");

        // 5. Lo·∫°i b·ªè kho·∫£ng tr·∫Øng v√† c√°c k√Ω t·ª± kh√¥ng mong mu·ªën (ch·ªØ th∆∞·ªùng)
        nonDiacritic = nonDiacritic.replaceAll("[\\s-]+", "");

        return nonDiacritic;
    }
    // ============================================================

    /**
     * Sinh m·ªôt ti·ªÅn t·ªë 3 ch·ªØ s·ªë ng·∫´u nhi√™n v√† duy nh·∫•t trong m·ªôt ph·∫°m vi.
     */
    private static int generateUniquePrefix(int minPrefix, int maxPrefix) {
        int prefix;
        do {
            prefix = random.nextInt(maxPrefix - minPrefix + 1) + minPrefix;
        } while (usedPrefixes.contains(prefix));

        usedPrefixes.add(prefix);
        return prefix;
    }

    /**
     * H√†m resetTable
     */
    private static void resetTable(Connection conn, String tableName) throws SQLException {
        try (Statement st = conn.createStatement()) {
            st.executeUpdate("SET FOREIGN_KEY_CHECKS = 0");
            st.executeUpdate("DELETE FROM " + tableName);
            st.executeUpdate("ALTER TABLE " + tableName + " AUTO_INCREMENT = 1");
            st.executeUpdate("SET FOREIGN_KEY_CHECKS = 1");
        }
    }

    /**
     * Ch√®n b·∫£n ghi ƒë·∫ßu ti√™n v·ªõi ID ƒë∆∞·ª£c ch·ªâ ƒë·ªãnh ƒë·ªÉ thi·∫øt l·∫≠p AUTO_INCREMENT.
     */
    private static int insertInitialId(Connection conn, String tableName, String idColumn, int prefix) throws SQLException {
        // ID kh·ªüi t·∫°o (6 ch·ªØ s·ªë): prefix * 1000 + 1 (VD: 250 * 1000 + 1 = 250001)
        int startId = prefix * 1000 + 1;
        String sql = String.format("INSERT INTO %s (%s) VALUES (?)", tableName, idColumn);

        try (Statement st = conn.createStatement(); PreparedStatement ps = conn.prepareStatement(sql)) {
            // T·∫Øt ki·ªÉm tra FK t·∫°m th·ªùi
            st.executeUpdate("SET FOREIGN_KEY_CHECKS = 0");

            ps.setInt(1, startId);
            ps.executeUpdate();

            // X√≥a b·∫£n ghi ƒë√≥ ƒëi. AUTO_INCREMENT ƒë√£ ƒë∆∞·ª£c ƒë·∫∑t l√† startId + 1 (XXX002).
            st.executeUpdate(String.format("DELETE FROM %s WHERE %s = %d", tableName, idColumn, startId));

            // B·∫≠t l·∫°i ki·ªÉm tra FK
            st.executeUpdate("SET FOREIGN_KEY_CHECKS = 1");

            return startId;
        }
    }

    public static void main(String[] args) {
        try (Connection conn = DBConnect.getConnection()) {
            if (conn == null) {
                System.out.println("‚ùå Kh√¥ng th·ªÉ k·∫øt n·ªëi CSDL!");
                return;
            }
            System.out.println("‚úÖ K·∫øt n·ªëi th√†nh c√¥ng!");

            // X√≥a danh s√°ch ID c≈© v√† ti·ªÅn t·ªë
            usedPrefixes.clear();
            maSinhViens.clear();
            maNhanViens.clear();
            maSachs.clear();
            maPhieuMuons.clear();
            maTacGias.clear();
            maTheLoais.clear();
            maNXBs.clear();

            // 1. SINH TI·ªÄN T·ªê NG·∫™U NHI√äN V√Ä DUY NH·∫§T (3 CH·ªÆ S·ªê)
            PREFIX_SV = generateUniquePrefix(100, 499); // MaSV: 100-499
            PREFIX_NV = generateUniquePrefix(500, 999); // MaNV: 500-999
            PREFIX_TG = generateUniquePrefix(100, 999);
            PREFIX_TL = generateUniquePrefix(100, 999);
            PREFIX_NXB = generateUniquePrefix(100, 999);
            PREFIX_SACH = generateUniquePrefix(100, 999);
            PREFIX_PM = generateUniquePrefix(100, 999);
            PREFIX_PT = generateUniquePrefix(100, 999);

            System.out.println("‚öôÔ∏è Ti·ªÅn t·ªë ID ng·∫´u nhi√™n: SV=" + PREFIX_SV + ", NV=" + PREFIX_NV + "...");

            // --- RESET B·∫¢NG & THI·∫æT L·∫¨P AUTO_INCREMENT D√ôNG TI·ªÄN T·ªê ---
            resetTable(conn, "CHITIETPHIEUTRA");
            resetTable(conn, "PHIEUTRA");
            insertInitialId(conn, "PHIEUTRA", "MaPhieuTra", PREFIX_PT);
            resetTable(conn, "LICHSUGIAHAN");
            resetTable(conn, "CHITIETPHIEUMUON");
            resetTable(conn, "PHIEUMUON");
            insertInitialId(conn, "PHIEUMUON", "MaPhieuMuon", PREFIX_PM);
            resetTable(conn, "SACH_TACGIA");
            resetTable(conn, "TAIKHOAN");
            resetTable(conn, "HINHANH");
            resetTable(conn, "SACH");
            insertInitialId(conn, "SACH", "MaSach", PREFIX_SACH);
            resetTable(conn, "NHAXUATBAN");
            insertInitialId(conn, "NHAXUATBAN", "MaNXB", PREFIX_NXB);
            resetTable(conn, "THELOAI");
            insertInitialId(conn, "THELOAI", "MaTheLoai", PREFIX_TL);
            resetTable(conn, "TACGIA");
            insertInitialId(conn, "TACGIA", "MaTG", PREFIX_TG);
            resetTable(conn, "NHANVIEN");
            insertInitialId(conn, "NHANVIEN", "MaNV", PREFIX_NV);
            resetTable(conn, "SINHVIEN");
            insertInitialId(conn, "SINHVIEN", "MaSV", PREFIX_SV);

            // --- CH√àN D·ªÆ LI·ªÜU ---
            insertNhanVien(conn, COUNT_NHAN_VIEN);
            insertSinhVien(conn, COUNT_SINH_VIEN);
            insertTacGia(conn, COUNT_TAC_GIA);
            insertTheLoai(conn);
            insertNXB(conn, COUNT_NXB);
            insertSach(conn);
            insertHinhAnh(conn);
            insertSachTacGia(conn);

            insertPhieuMuon(conn, COUNT_PHIEU_MUON);
            insertPhieuTra(conn, COUNT_PHIEU_TRA);

            insertTaiKhoan(conn);

            System.out.println("üéâ Sinh d·ªØ li·ªáu gi·∫£ th√†nh c√¥ng!");
        } catch (Exception e) {
            e.printStackTrace();
        }
    }

    // --- C√ÅC H√ÄM INSERT D·ªÆ LI·ªÜU ƒê√É C·∫¨P NH·∫¨T ---

    private static void insertSinhVien(Connection conn, int count) throws SQLException {
        String sql = "INSERT INTO SINHVIEN (TenSV, NgaySinh, GioiTinh, DiaChi, SoDienThoai, Email, NgayDKThe, NgayHHThe) VALUES (?,?,?,?,?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 0; i < count; i++) {
                String tenDayDu = faker.name().fullName();

                // Email kh√¥ng d·∫•u v√† gi·ªëng t√™n
                String tenKhongDau = toNonDiacritic(tenDayDu);
                String email = tenKhongDau + "@sv.tvu.edu.vn";

                // S·ªë ƒëi·ªán tho·∫°i 11 s·ªë
                String sdt = "0" + faker.number().digits(10);

                ps.setString(1, tenDayDu);
                ps.setDate(2, Date.valueOf(LocalDate.now().minusYears(18 + random.nextInt(5)).minusDays(random.nextInt(365))));
                ps.setString(3, random.nextBoolean() ? "Nam" : "N·ªØ");
                ps.setString(4, faker.address().fullAddress());
                ps.setString(5, sdt);
                ps.setString(6, email);
                LocalDate ngayDK = LocalDate.now().minusMonths(random.nextInt(12));
                ps.setDate(7, Date.valueOf(ngayDK));
                ps.setDate(8, Date.valueOf(ngayDK.plusYears(4)));
                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) maSinhViens.add(rs.getInt(1));
                }
            }
        }
    }

    private static void insertNhanVien(Connection conn, int count) throws SQLException {
        String sql = "INSERT INTO NHANVIEN (TenNV, NgaySinh, GioiTinh, SoDienThoai, Email) VALUES (?,?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 0; i < count; i++) {
                String tenDayDu = faker.name().fullName();

                // Email kh√¥ng d·∫•u v√† gi·ªëng t√™n
                String tenKhongDau = toNonDiacritic(tenDayDu);
                String email = tenKhongDau + "@nv.tvu.edu.vn";

                // S·ªë ƒëi·ªán tho·∫°i 11 s·ªë
                String sdt = "0" + faker.number().digits(10);

                ps.setString(1, tenDayDu);
                ps.setDate(2, Date.valueOf(LocalDate.now().minusYears(22 + random.nextInt(20))));
                ps.setString(3, random.nextBoolean() ? "Nam" : "N·ªØ");
                ps.setString(4, sdt);
                ps.setString(5, email);
                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) maNhanViens.add(rs.getInt(1));
                }
            }
        }
    }

    private static void insertTacGia(Connection conn, int count) throws SQLException {
        String sql = "INSERT INTO TACGIA (TenTG, QueQuan, NamSinh) VALUES (?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 0; i < count; i++) {
                ps.setString(1, faker.book().author());
                ps.setString(2, faker.address().cityName());
                ps.setInt(3, 1940 + random.nextInt(50));
                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) maTacGias.add(rs.getInt(1));
                }
            }
        }
    }

    private static void insertNXB(Connection conn, int count) throws SQLException {
        String sql = "INSERT INTO NHAXUATBAN (TenNXB, DiaChi, SoDienThoai) VALUES (?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 0; i < count; i++) {
                ps.setString(1, "NXB " + faker.company().name());
                ps.setString(2, faker.address().streetAddress());
                ps.setString(3, faker.phoneNumber().phoneNumber());
                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) maNXBs.add(rs.getInt(1));
                }
            }
        }
    }

    private static void insertTheLoai(Connection conn) throws SQLException {
        String[] list = {"Ti·ªÉu thuy·∫øt", "Truy·ªán ng·∫Øn", "Khoa h·ªçc", "C√¥ng ngh·ªá", "T√¢m l√Ω", "L·ªãch s·ª≠", "Gi√°o d·ª•c", "Thi·∫øu nhi"};
        String sql = "INSERT INTO THELOAI (TenTheLoai) VALUES (?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (String tl : list) {
                ps.setString(1, tl);
                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) maTheLoais.add(rs.getInt(1));
                }
            }
        }
    }

    private static void insertSach(Connection conn) throws SQLException {
        Map<String, List<String>> TEN_SACH_THEO_THELOAI = new LinkedHashMap<String, List<String>>() {{
            put("Ti·ªÉu thuy·∫øt", Arrays.asList(
                    "M√πa H√® C·ªßa T√¥i", "Ng∆∞·ªùi L·∫° Tr√™n Ph·ªë", "Hoa Trong Gi√≥", "B·ª©c Tranh T√¨nh Y√™u", "Nh·ªØng Ng√†y Kh√¥ng Qu√™n",
                    "D∆∞·ªõi √Ånh TrƒÉng", "M√¢y Tr√¥i Cu·ªëi Tr·ªùi", "Nh·ªØng B∆∞·ªõc Ch√¢n Im L·∫∑ng", "H·∫°nh Ph√∫c Mong Manh", "L·ªùi Th√¨ Th·∫ßm"
            ));
            put("Truy·ªán ng·∫Øn", Arrays.asList(
                    "Chuy·∫øn Xe Cu·ªëi Tu·∫ßn", "Ng√¥i Nh√† Sau H·∫ªm", "M·ªôt Tho√°ng Qu√° Kh·ª©", "C√¢u Chuy·ªán ƒê√™m TrƒÉng", "Nh·ªØng Kho·∫£nh Kh·∫Øc Nh·ªè",
                    "B√™n C·ª≠a S·ªï", "ƒê√™m Th√†nh Ph·ªë", "K√Ω ·ª®c Tu·ªïi Th∆°", "Nh·ªØng ƒêi·ªÅu Ch∆∞a K·ªÉ", "Nh·ªØng B·ª©c Th∆∞ M·∫•t"
            ));
            put("Khoa h·ªçc", Arrays.asList(
                    "V≈© Tr·ª• H·ªçc C∆° B·∫£n", "Kh√°m Ph√° Sinh H·ªçc", "H√≥a H·ªçc Vui", "Thi√™n VƒÉn H·ªçc Th·ª±c H√†nh", "Khoa H·ªçc Tr·∫ª Em",
                    "C√¥ng Ngh·ªá Sinh H·ªçc", "V·∫≠t L√Ω Th·ª±c H√†nh", "C√°c Ph√°t Minh Vƒ© ƒê·∫°i", "Th·∫ø Gi·ªõi To√°n H·ªçc", "Khoa H·ªçc M√°y T√≠nh"
            ));
            put("C√¥ng ngh·ªá", Arrays.asList(
                    "L·∫≠p Tr√¨nh Java", "H·ªçc Python Th·ª±c H√†nh", "C∆° S·ªü D·ªØ Li·ªáu N√¢ng Cao", "Robot & T·ª± ƒê·ªông H√≥a", "Machine Learning Th·ª±c H√†nh",
                    "Ph√°t Tri·ªÉn Web", "Thi·∫øt K·∫ø App Android", "Tr√≠ Tu·ªá Nh√¢n T·∫°o", "Blockchain Th·ª±c H√†nh", "C√¥ng Ngh·ªá M·∫°ng"
            ));
            put("T√¢m l√Ω", Arrays.asList(
                    "T√¢m L√Ω H·ªçc Gia ƒê√¨nh", "Qu·∫£n L√Ω C·∫£m X√∫c", "Nh·ªØng B√†i H·ªçc Cu·ªôc S·ªëng", "T√¢m L√Ω Tr·∫ª Em", "K·ªπ NƒÉng Giao Ti·∫øp",
                    "Hi·ªÉu V·ªÅ T√¢m H·ªìn", "T√¢m L√Ω H·ªçc Th·ª±c H√†nh", "C√¢n B·∫±ng Cu·ªôc S·ªëng", "Nh·ªØng C√¢u Chuy·ªán Tr·ªã Li·ªáu", "S·ªëng Kh√¥ng H·ªëi Ti·∫øc"
            ));
            put("L·ªãch s·ª≠", Arrays.asList(
                    "L·ªãch S·ª≠ Vi·ªát Nam", "Chi·∫øn Tranh V√† H√≤a B√¨nh", "Nh·ªØng V·ªã Vua Vi·ªát Nam", "L·ªãch S·ª≠ Th·∫ø Gi·ªõi", "Nh·ªØng Ng√†y Th√°ng Kh√¥ng Qu√™n",
                    "ƒê·∫ø Ch·∫ø La M√£", "Chi·∫øn Tranh Th·∫ø Gi·ªõi II", "Cu·ªôc C√°ch M·∫°ng C√¥ng Nghi·ªáp", "H·ªì Ch√≠ Minh To√†n T·∫≠p", "Nh·ªØng Anh H√πng D√¢n T·ªôc"
            ));
            put("Gi√°o d·ª•c", Arrays.asList(
                    "C·∫©m Nang Sinh Vi√™n", "Gi√°o Tr√¨nh To√°n H·ªçc", "Gi√°o D·ª•c Th∆∞·ªùng Th·ª©c", "H·ªçc Vui H·ªçc Kh·ªèe", "K·ªπ NƒÉng H·ªçc T·∫≠p",
                    "Ph∆∞∆°ng Ph√°p Gi·∫£ng D·∫°y", "T√¢m L√Ω H·ªçc Gi√°o D·ª•c", "K·ªπ NƒÉng Thuy·∫øt Tr√¨nh", "H·ªçc Ti·∫øng Anh Hi·ªáu Qu·∫£", "K·ªπ NƒÉng Sinh Vi√™n"
            ));
            put("Thi·∫øu nhi", Arrays.asList(
                    "Truy·ªán C·ªï T√≠ch Vi·ªát Nam", "Thi·∫øu Nhi Kh√°m Ph√°", "Nh·ªØng Ng√†y Th√°ng Vui", "Vui H·ªçc To√°n", "Chuy·ªán K·ªÉ Tr∆∞·ªõc Gi·ªù Ng·ªß",
                    "Phi√™u L∆∞u C√πng Th·ªè", "C√¢u Chuy·ªán R·ª´ng Xanh", "Nh·ªØng Ng∆∞·ªùi B·∫°n Nh·ªè", "H·ªçc Vui Qua Truy·ªán", "Th·∫ø Gi·ªõi Di·ªáu K·ª≥"
            ));
        }};

        String sql = "INSERT INTO SACH (TenSach, NamXuatBan, SoTrang, MaNXB, MaTheLoai, MoTa, GiaTien, SoLuong) VALUES (?,?,?,?,?,?,?,?)";
        Set<String> usedTenSach = new HashSet<>();
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {

            int currentTLIndex = 0;
            for (String tl : TEN_SACH_THEO_THELOAI.keySet()) {
                List<String> tenSachList = TEN_SACH_THEO_THELOAI.get(tl);
                for (String ten : tenSachList) {
                    if (usedTenSach.contains(ten)) continue;
                    usedTenSach.add(ten);

                    int maNXB = maNXBs.get(random.nextInt(maNXBs.size()));
                    int maTL = maTheLoais.get(currentTLIndex);

                    ps.setString(1, ten);
                    ps.setInt(2, 2000 + random.nextInt(24));
                    ps.setInt(3, 50 + random.nextInt(400));
                    ps.setInt(4, maNXB);
                    ps.setInt(5, maTL);
                    ps.setString(6, getMoTaByTheLoai(tl, ten));
                    ps.setBigDecimal(7, new BigDecimal(30000 + random.nextInt(200000)));
                    ps.setInt(8,faker.number().numberBetween(1,50));
                    ps.executeUpdate();

                    try (ResultSet rs = ps.getGeneratedKeys()) {
                        if (rs.next()) maSachs.add(rs.getInt(1));
                    }
                }
                currentTLIndex++;
            }
        }
    }


    private static void insertHinhAnh(Connection conn) throws SQLException {
        String sql = "INSERT INTO HINHANH (DuongLinkAnh, MaSach) VALUES (?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            for (int maSach : maSachs) {
                ps.setString(1, "https://picsum.photos/seed/book" + maSach + "/200/300");
                ps.setInt(2, maSach);
                ps.executeUpdate();
            }
        }
    }

    private static void insertSachTacGia(Connection conn) throws SQLException {
        String sql = "INSERT INTO SACH_TACGIA (MaTG, MaSach) VALUES (?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            for (int maSach : maSachs) {
                Set<Integer> usedTG = new HashSet<>();
                int soTacGia = 1 + random.nextInt(3);
                for (int i = 0; i < soTacGia; i++) {
                    int maTG;
                    do {
                        maTG = maTacGias.get(random.nextInt(maTacGias.size()));
                    } while (usedTG.contains(maTG));

                    usedTG.add(maTG);
                    ps.setInt(1, maTG);
                    ps.setInt(2, maSach);
                    try {
                        ps.executeUpdate();
                    } catch (SQLException e) {
                        if (!e.getMessage().contains("Duplicate entry")) {
                            throw e;
                        }
                    }
                }
            }
        }
    }


    private static void insertPhieuMuon(Connection conn, int count) throws SQLException {
        String sql = "INSERT INTO PHIEUMUON (MaSV, NgayMuon, HanTra, TrangThai, MaNV, SoLanGiaHan) VALUES (?,?,?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 0; i < count; i++) {
                int maSV = maSinhViens.get(random.nextInt(maSinhViens.size()));
                int maNV = maNhanViens.get(random.nextInt(maNhanViens.size()));

                LocalDate ngayMuon = LocalDate.now().minusDays(random.nextInt(30));
                LocalDate hanTra = ngayMuon.plusDays(14);

                ps.setInt(1, maSV);
                ps.setDate(2, Date.valueOf(ngayMuon));
                ps.setDate(3, Date.valueOf(hanTra));
                ps.setString(4, random.nextBoolean() ? "ƒêang m∆∞·ª£n" : "ƒê√£ tr·∫£");
                ps.setInt(5, maNV);
                ps.setInt(6, random.nextInt(3));

                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) {
                        int maPM = rs.getInt(1);
                        maPhieuMuons.add(maPM);
                        insertCTPhieuMuon(conn, maPM);
                    }
                }
            }
        }
    }

    private static void insertCTPhieuMuon(Connection conn, int maPM) throws SQLException {
        String sql = "INSERT INTO CHITIETPHIEUMUON (MaPhieuMuon, MaSach, SoLuongMuon) VALUES (?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            int soSach = 1 + random.nextInt(3);
            Set<Integer> usedSach = new HashSet<>();
            for (int i = 0; i < soSach; i++) {
                int maSach;
                do {
                    maSach = maSachs.get(random.nextInt(maSachs.size()));
                } while (usedSach.contains(maSach));
                usedSach.add(maSach);

                ps.setInt(1, maPM);
                ps.setInt(2, maSach);
                ps.setInt(3, 1);
                ps.executeUpdate();
            }
        }
    }

    private static void insertPhieuTra(Connection conn, int count) throws SQLException {
        String sql = "INSERT INTO PHIEUTRA (MaPhieuMuon, NgayTra, MaNV, MaSV) VALUES (?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql, Statement.RETURN_GENERATED_KEYS)) {
            for (int i = 0; i < count; i++) {
                int maPM = maPhieuMuons.get(random.nextInt(maPhieuMuons.size()));

                int maNV = maNhanViens.get(random.nextInt(maNhanViens.size()));
                int maSV = maSinhViens.get(random.nextInt(maSinhViens.size()));

                LocalDate ngayTra = LocalDate.now().minusDays(random.nextInt(10));

                ps.setInt(1, maPM);
                ps.setDate(2, Date.valueOf(ngayTra));
                ps.setInt(3, maNV);
                ps.setInt(4, maSV);
                ps.executeUpdate();

                try (ResultSet rs = ps.getGeneratedKeys()) {
                    if (rs.next()) {
                        int maPT = rs.getInt(1);
                        insertCTPhieuTra(conn, maPT);
                    }
                }
            }
        }
    }

    private static void insertCTPhieuTra(Connection conn, int maPT) throws SQLException {
        String sql = "INSERT INTO CHITIETPHIEUTRA (MaPhieuTra, MaSach, SoLuongTra) VALUES (?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {
            int soSach = 1 + random.nextInt(2);
            Set<Integer> usedSach = new HashSet<>();
            for (int i = 0; i < soSach; i++) {
                int maSach;
                do {
                    maSach = maSachs.get(random.nextInt(maSachs.size()));
                } while (usedSach.contains(maSach));
                usedSach.add(maSach);

                ps.setInt(1, maPT);
                ps.setInt(2, maSach);
                ps.setInt(3, 1);
                ps.executeUpdate();
            }
        }
    }

    private static void insertTaiKhoan(Connection conn) throws SQLException {
        String sql = "INSERT INTO TAIKHOAN (TenDangNhap, MatKhau, MaNV, MaSV, VaiTro) VALUES (?,?,?,?,?)";
        try (PreparedStatement ps = conn.prepareStatement(sql)) {

            // 1. T√†i kho·∫£n NHANVIEN (TenDangNhap l√† MaNV)
            for (int maNV : maNhanViens) {
                ps.setString(1, String.valueOf(maNV));
                ps.setString(2, "123456");
                ps.setInt(3, maNV);
                ps.setNull(4, Types.INTEGER);
                ps.setString(5, "Nh√¢n vi√™n");
                ps.executeUpdate();
            }

            // 2. T√†i kho·∫£n SINHVIEN (TenDangNhap l√† MaSV)
            for (int maSV : maSinhViens) {
                ps.setString(1, String.valueOf(maSV));
                ps.setString(2, "123456");
                ps.setNull(3, Types.INTEGER);
                ps.setInt(4, maSV);
                ps.setString(5, "Sinh vi√™n");
                ps.executeUpdate();
            }

            // 3. T√†i kho·∫£n Admin
            ps.setString(1, "admin");
            ps.setString(2, "admin");
            ps.setNull(3, Types.INTEGER);
            ps.setNull(4, Types.INTEGER);
            ps.setString(5, "Admin");
            ps.executeUpdate();
        }
    }

    private static String getMoTaByTheLoai(String tenTheLoai, String tenSach) {
        return "M√¥ t·∫£ cho s√°ch " + tenSach + " thu·ªôc th·ªÉ lo·∫°i " + tenTheLoai + ".";
    }
}